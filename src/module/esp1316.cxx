#include <cstring>
#include "esp_log.h"
#include "module/ssd1316.hxx"
#include "assembly/assembly.hxx"
#include "task.hxx"

char const static *TAG = "ssd1316";

uint8_t fontmap[128][8] = {
    // ascii 0 - 31
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x00 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x01 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x02 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x03 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x04 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x05 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x06 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x07 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x08 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x09 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x0A (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x0B (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x0C (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x0D (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x0E (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x0F (' ')

    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x10 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x11 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x12 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x13 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x14 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x15 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x16 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x17 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x18 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x19 (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x1A (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x1B (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x1C (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x1D (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x1E (' ')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x1F (' ')

    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x20 (' ')
    {0x00, 0x00, 0x00, 0x5F, 0x5F, 0x00, 0x00, 0x00}, // 0x21 ('!')
    // {0x00, 0x0E, 0x0F, 0x01, 0x0E, 0x0F, 0x01, 0x00}, // 0x22 ('"')
    {0x00, 0x03, 0x07, 0x00, 0x07, 0x03, 0x00, 0x00}, // 0x22 ('"')
    {0x00, 0x48, 0x7E, 0x7F, 0x49, 0x7F, 0x32, 0x00}, // 0x23 ('#')
    {0x00, 0x24, 0x2E, 0x6B, 0x6B, 0x3A, 0x12, 0x00}, // 0x24 ('$')
    {0x00, 0x46, 0x66, 0x30, 0x18, 0x6C, 0x66, 0x00}, // 0x25 ('%')
    {0x00, 0x30, 0x7A, 0x4F, 0x4D, 0x7B, 0x33, 0x00}, // 0x26 ('&')
    // {0x00, 0x04, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00}, // 0x27 (''')
    {0x00, 0x00, 0x00, 0x07, 0x03, 0x00, 0x00, 0x00}, // 0x27 (''')
    {0x00, 0x00, 0x3E, 0x7F, 0x41, 0x41, 0x00, 0x00}, // 0x28 ('(')
    {0x00, 0x00, 0x41, 0x41, 0x7F, 0x3E, 0x00, 0x00}, // 0x29 (')')
    {0x00, 0x08, 0x2A, 0x3E, 0x1C, 0x3E, 0x2A, 0x08}, // 0x2A ('*')
    {0x00, 0x08, 0x08, 0x3E, 0x3E, 0x08, 0x08, 0x00}, // 0x2B ('+')
    {0x00, 0x00, 0x80, 0xE0, 0x60, 0x00, 0x00, 0x00}, // 0x2C (',')
    {0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00}, // 0x2D ('-')
    {0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00}, // 0x2E ('.')
    {0x00, 0x40, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00}, // 0x2F ('/')

    {0x00, 0x3E, 0x7F, 0x49, 0x45, 0x7F, 0x3E, 0x00}, // 0x30 ('0')
    {0x00, 0x00, 0x04, 0x06, 0x7F, 0x7F, 0x00, 0x00}, // 0x31 ('1')
    {0x00, 0x64, 0x76, 0x5D, 0x4D, 0x4F, 0x46, 0x00}, // 0x32 ('2')
    {0x00, 0x22, 0x63, 0x49, 0x49, 0x7F, 0x36, 0x00}, // 0x33 ('3')
    {0x00, 0x18, 0x1C, 0x16, 0x7F, 0x7F, 0x10, 0x00}, // 0x34 ('4')
    {0x00, 0x27, 0x67, 0x45, 0x45, 0x7D, 0x39, 0x00}, // 0x35 ('5')
    {0x00, 0x3E, 0x7F, 0x49, 0x49, 0x7B, 0x32, 0x00}, // 0x36 ('6')
    {0x00, 0x03, 0x03, 0x79, 0x7D, 0x07, 0x03, 0x00}, // 0x37 ('7')
    {0x00, 0x36, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00}, // 0x38 ('8')
    {0x00, 0x26, 0x6F, 0x49, 0x49, 0x7F, 0x3E, 0x00}, // 0x39 ('9')
    {0x00, 0x00, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00}, // 0x3A (':')
    {0x00, 0x00, 0xEC, 0x6C, 0x00, 0x00, 0x00, 0x00}, // 0x3B (';')
    {0x00, 0x08, 0x1C, 0x36, 0x63, 0x41, 0x00, 0x00}, // 0x3C ('<')
    {0x00, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00}, // 0x3D ('=')
    {0x00, 0x41, 0x63, 0x36, 0x1C, 0x08, 0x00, 0x00}, // 0x3E ('>')
    {0x00, 0x02, 0x03, 0x59, 0x5D, 0x07, 0x02, 0x00}, // 0x3F ('?')

    {0x00, 0x3E, 0x7F, 0x41, 0x5D, 0x5D, 0x1F, 0x00}, // 0x40 ('@')
    {0x00, 0x7E, 0x7F, 0x11, 0x11, 0x7F, 0x7E, 0x00}, // 0x41 ('A')
    {0x00, 0x7F, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00}, // 0x42 ('B')
    {0x00, 0x3E, 0x7F, 0x41, 0x41, 0x63, 0x22, 0x00}, // 0x43 ('C')
    {0x00, 0x7F, 0x7F, 0x41, 0x41, 0x7F, 0x3E, 0x00}, // 0x44 ('D')
    {0x00, 0x7F, 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00}, // 0x45 ('E')
    {0x00, 0x7F, 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00}, // 0x46 ('F')
    {0x00, 0x3E, 0x7F, 0x41, 0x49, 0x79, 0x79, 0x00}, // 0x47 ('G')
    {0x00, 0x7F, 0x7F, 0x08, 0x08, 0x7F, 0x7F, 0x00}, // 0x48 ('H')
    {0x00, 0x00, 0x41, 0x7F, 0x7F, 0x41, 0x00, 0x00}, // 0x49 ('I')
    {0x00, 0x20, 0x60, 0x41, 0x7F, 0x3F, 0x01, 0x00}, // 0x4A ('J')
    {0x00, 0x7F, 0x7F, 0x1C, 0x36, 0x63, 0x41, 0x00}, // 0x4B ('K')
    {0x00, 0x7F, 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00}, // 0x4C ('L')
    {0x00, 0x7F, 0x7F, 0x06, 0x06, 0x7F, 0x7F, 0x00}, // 0x4D ('M')
    {0x00, 0x7F, 0x7F, 0x0E, 0x1C, 0x7F, 0x7F, 0x00}, // 0x4E ('N')
    {0x00, 0x3E, 0x7F, 0x41, 0x41, 0x7F, 0x3E, 0x00}, // 0x4F ('O')
    {0x00, 0x7F, 0x7F, 0x09, 0x09, 0x0F, 0x06, 0x00}, // 0x50 ('P')

    {0x00, 0x3E, 0x7F, 0x41, 0x61, 0x7F, 0x5E, 0x00}, // 0x51 ('Q')
    {0x00, 0x7F, 0x7F, 0x19, 0x39, 0x6F, 0x46, 0x00}, // 0x52 ('R')
    {0x00, 0x26, 0x6F, 0x49, 0x49, 0x7B, 0x32, 0x00}, // 0x53 ('S')
    {0x00, 0x00, 0x01, 0x7F, 0x7F, 0x01, 0x00, 0x00}, // 0x54 ('T')
    {0x00, 0x3F, 0x7F, 0x40, 0x40, 0x7F, 0x3F, 0x00}, // 0x55 ('U')
    {0x00, 0x1F, 0x3F, 0x60, 0x60, 0x3F, 0x1F, 0x00}, // 0x56 ('V')
    {0x00, 0x7F, 0x7F, 0x38, 0x1C, 0x38, 0x7F, 0x7F}, // 0x57 ('W')
    {0x00, 0x63, 0x77, 0x1C, 0x1C, 0x77, 0x63, 0x00}, // 0x58 ('X')
    {0x00, 0x00, 0x07, 0x4F, 0x78, 0x78, 0x4F, 0x07}, // 0x59 ('Y')
    {0x00, 0x71, 0x79, 0x4D, 0x47, 0x43, 0x00, 0x00}, // 0x5A ('Z')
    {0x00, 0x00, 0x7F, 0x7F, 0x41, 0x41, 0x00, 0x00}, // 0x5B ('[')
    {0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00}, // 0x5C ('\')
    {0x00, 0x00, 0x41, 0x41, 0x7F, 0x7F, 0x00, 0x00}, // 0x5D (']')
    {0x00, 0x08, 0x0C, 0x06, 0x06, 0x0C, 0x08, 0x00}, // 0x5E ('^')
    {0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00}, // 0x5F ('_')
    {0x00, 0x00, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00}, // 0x60 ('`')
    {0x00, 0x20, 0x74, 0x54, 0x54, 0x7C, 0x78, 0x00}, // 0x61 ('a')
    {0x00, 0x7F, 0x7F, 0x44, 0x44, 0x7C, 0x38, 0x00}, // 0x62 ('b')
    {0x00, 0x38, 0x7C, 0x44, 0x44, 0x6C, 0x28, 0x00}, // 0x63 ('c')
    {0x00, 0x38, 0x7C, 0x44, 0x44, 0x7F, 0x7F, 0x00}, // 0x64 ('d')
    {0x00, 0x38, 0x7C, 0x54, 0x54, 0x5C, 0x18, 0x00}, // 0x65 ('e')
    {0x00, 0x08, 0x7E, 0x7F, 0x09, 0x03, 0x02, 0x00}, // 0x66 ('f')
    {0x00, 0x18, 0xBC, 0xA4, 0xA4, 0xFC, 0x7C, 0x00}, // 0x67 ('g')
    {0x00, 0x7F, 0x7F, 0x04, 0x04, 0x7C, 0x78, 0x00}, // 0x68 ('h')
    {0x00, 0x00, 0x00, 0x7D, 0x7D, 0x00, 0x00, 0x00}, // 0x69 ('i')
    {0x00, 0x40, 0xC0, 0x80, 0x80, 0xFD, 0x7D, 0x00}, // 0x6A ('j')
    {0x00, 0x7F, 0x7F, 0x10, 0x38, 0x6C, 0x44, 0x00}, // 0x6B ('k')
    {0x00, 0x00, 0x00, 0x7F, 0x7F, 0x40, 0x40, 0x00}, // 0x6C ('l')
    {0x00, 0x7C, 0x7C, 0x18, 0x38, 0x1C, 0x7C, 0x78}, // 0x6D ('m')
    {0x00, 0x7C, 0x7C, 0x04, 0x04, 0x7C, 0x78, 0x00}, // 0x6E ('n')
    {0x00, 0x38, 0x7C, 0x44, 0x44, 0x7C, 0x38, 0x00}, // 0x6F ('o')

    {0x00, 0xFC, 0xFC, 0x24, 0x24, 0x3C, 0x18, 0x00}, // 0x70 ('p')
    {0x00, 0x18, 0x3C, 0x24, 0x24, 0xFC, 0xFC, 0x00}, // 0x71 ('q')
    {0x00, 0x7C, 0x7C, 0x04, 0x04, 0x0C, 0x08, 0x00}, // 0x72 ('r')
    {0x00, 0x48, 0x5C, 0x54, 0x54, 0x74, 0x24, 0x00}, // 0x73 ('s')
    {0x00, 0x04, 0x04, 0x3F, 0x7F, 0x44, 0x44, 0x00}, // 0x74 ('t')
    {0x00, 0x3C, 0x7C, 0x40, 0x40, 0x7C, 0x7C, 0x00}, // 0x75 ('u')
    {0x00, 0x1C, 0x3C, 0x60, 0x60, 0x3C, 0x1C, 0x00}, // 0x76 ('v')
    {0x00, 0x7C, 0x7C, 0x30, 0x18, 0x30, 0x7C, 0x7C}, // 0x77 ('w')
    {0x00, 0x44, 0x6C, 0x38, 0x38, 0x6C, 0x44, 0x00}, // 0x78 ('x')
    {0x00, 0x1C, 0xBC, 0xA0, 0xA0, 0xFC, 0x7C, 0x00}, // 0x79 ('y')
    {0x00, 0x64, 0x74, 0x54, 0x54, 0x5C, 0x4C, 0x00}, // 0x7A ('z')
    {0x00, 0x08, 0x3E, 0x77, 0x41, 0x41, 0x00, 0x00}, // 0x7B ('{')
    {0x00, 0x00, 0x00, 0x77, 0x77, 0x00, 0x00, 0x00}, // 0x7C ('|')
    {0x00, 0x00, 0x41, 0x41, 0x77, 0x3E, 0x08, 0x00}, // 0x7D ('}')
    {0x00, 0x08, 0x04, 0x0C, 0x0C, 0x04, 0x08, 0x00}, // 0x7E ('~')
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0x7F (' ')
};

namespace module::ssd1316
{
    esp_err_t cs_enable(spi::SpiConfig const *spi_config)
    {
        ESP_LOGD(TAG, "SPI CS ENABLE");
        return pin::write(spi_config->cs, 0);
    }

    esp_err_t cs_disable(spi::SpiConfig const *spi_config)
    {
        ESP_LOGD(TAG, "SPI CS DISABLE");
        return pin::write(spi_config->cs, 1);
    }

    esp_err_t reset(spi::SpiConfig const *spi_config)
    {
        ESP_LOGD(TAG, "RESET");
        esp_err_t err = ESP_OK;
        assert((err = pin::write(spi_config->rst, 0)) == ESP_OK);
        task::delay(100);
        assert((err = pin::write(spi_config->rst, 1)) == ESP_OK);
        task::delay(100);
        return err;
    }

    esp_err_t init(Config const *config)
    {
        esp_err_t err = ESP_OK;
        spi::SpiConfig const *spi_config = &config->spi_config;

        ESP_LOGD(TAG, "init & reset");
        assert((err = spi::init(spi_config)) == ESP_OK);
        assert((err = reset(spi_config)) == ESP_OK);

        assert((err = cs_enable(spi_config)) == ESP_OK);

        ESP_LOGD(TAG, "SET NORMAL DISPLAY");
        assert((err = spi::command(spi_config, 0xA6)) == ESP_OK);

        ESP_LOGD(TAG, "SET COM SCAN DIRECTION & SEGMENT RE-MAP");
        assert((err = spi::command(spi_config, 0xC8)) == ESP_OK);
        assert((err = spi::command(spi_config, 0xA0 | 0x01)) == ESP_OK);

        ESP_LOGD(TAG, "SET ADDRESSING MODE");
        assert((err = spi::command(spi_config, 0x20)) == ESP_OK);
        assert((err = spi::command(spi_config, 0x00)) == ESP_OK);

        ESP_LOGD(TAG, "SET DISPLAY OFFSET");
        assert((err = spi::command(spi_config, 0xD3)) == ESP_OK);
        assert((err = spi::command(spi_config, 0x00)) == ESP_OK);

        ESP_LOGD(TAG, "SET CHARGE PUMP & DISPLAY ON");
        assert((err = spi::command(spi_config, 0x8D)) == ESP_OK);
        assert((err = spi::command(spi_config, 0x14)) == ESP_OK);
        assert((err = spi::command(spi_config, 0xAF)) == ESP_OK);

        assert((err = cs_disable(spi_config)) == ESP_OK);

        return err;
    }

    esp_err_t set_cursor(Config const *config, uint8_t page, uint8_t column)
    {
        esp_err_t err = ESP_OK;
        spi::SpiConfig const *spi_config = &config->spi_config;

        assert((err = cs_enable(spi_config)) == ESP_OK);

        // SET PAGE ADDRESS
        assert((err = spi::command(spi_config, 0x22)) == ESP_OK);
        assert((err = spi::command(spi_config, page)) == ESP_OK);
        assert((err = spi::command(spi_config, 0x07)) == ESP_OK);

        // SET COLUMN ADDRESS
        assert((err = spi::command(spi_config, 0x21)) == ESP_OK);
        assert((err = spi::command(spi_config, column * 8)) == ESP_OK);
        assert((err = spi::command(spi_config, 0xFF)) == ESP_OK);

        assert((err = cs_disable(spi_config)) == ESP_OK);
        return err;
    }

    esp_err_t draw_text(Config const *config, char const *str)
    {
        esp_err_t err = ESP_OK;
        spi::SpiConfig const *spi_config = &config->spi_config;

        assert((err = cs_enable(spi_config)) == ESP_OK);

        size_t length = strlen(str);
        for (size_t i = 0; i < length; i++)
        {
            uint8_t code = str[i];
            uint8_t *glyph = fontmap[code];
            assert((err = spi::buffer(spi_config, glyph, 8)) == ESP_OK);
        }
        // write data
        assert((err = cs_disable(spi_config)) == ESP_OK);

        return err;
    }

    esp_err_t draw8x8(Config const *config, uint8_t page, uint8_t column, uint8_t const *buffer)
    {
        esp_err_t err = ESP_OK;
        spi::SpiConfig const *spi_config = &config->spi_config;

        assert((err = cs_enable(spi_config)) == ESP_OK);

        // SET PAGE ADDRESS
        assert((err = spi::command(spi_config, 0x22)) == ESP_OK);
        assert((err = spi::command(spi_config, page)) == ESP_OK);
        assert((err = spi::command(spi_config, 0x07)) == ESP_OK);

        // SET COLUMN ADDRESS
        assert((err = spi::command(spi_config, 0x21)) == ESP_OK);
        assert((err = spi::command(spi_config, column)) == ESP_OK);
        assert((err = spi::command(spi_config, 0xFF)) == ESP_OK);

        // write data
        assert((err = spi::buffer(spi_config, buffer, 8)) == ESP_OK);

        assert((err = cs_disable(spi_config)) == ESP_OK);

        return err;
    }

    esp_err_t display(Config const *config, uint8_t const *buffer, size_t length)
    {
        esp_err_t err = ESP_OK;
        spi::SpiConfig const *spi_config = &config->spi_config;

        assert((err = cs_enable(spi_config)) == ESP_OK);

        // SET PAGE ADDRESS
        assert((err = spi::command(spi_config, 0x22)) == ESP_OK);
        assert((err = spi::command(spi_config, 0x00)) == ESP_OK);
        assert((err = spi::command(spi_config, 0x07)) == ESP_OK);

        // SET COLUMN ADDRESS
        assert((err = spi::command(spi_config, 0x21)) == ESP_OK);
        assert((err = spi::command(spi_config, 0x00)) == ESP_OK);
        assert((err = spi::command(spi_config, 0xFF)) == ESP_OK);

        // write data
        assert((err = spi::buffer(spi_config, buffer, length)) == ESP_OK);

        assert((err = cs_disable(spi_config)) == ESP_OK);

        return err;
    }
}
